# Generated by Django 2.2.11 on 2021-06-14 09:08
from django.db import migrations, models
from django.db.models import Count, F


# noinspection PyPep8Naming
def forward(apps, schema_editor):
    Table = apps.get_model("database", "Table")
    Field = apps.get_model("database", "Field")

    fix_reserved_and_blank_field_names(Field)
    fix_duplicate_field_names(Field, Table)


def fix_duplicate_field_names(Field, Table):
    tables_with_duplicate_fields = (
        Table.objects.values("id", "field__name")
        .annotate(name_count=Count("field__name"))
        .filter(name_count__gt=1)
        .values_list("id", "field__name")
        .order_by()
    )
    for table_id, duplicate_name in tables_with_duplicate_fields:
        i = 2
        fields_with_reserved_names = Field.objects.filter(
            table_id=table_id, name=duplicate_name
        ).order_by("id")
        # Skip the field with the smallest ID as we want to leave the first one
        # with the duplicate name unchanged and fix the following ones not to
        # clash.
        for field in fields_with_reserved_names[1:]:
            new_name, i = find_next_unused_field_name(
                Field, table_id, duplicate_name, i
            )
            field.old_name = field.name
            field.name = new_name
            field.save()


def fix_reserved_and_blank_field_names(Field):
    # Fix reserved names first as if they also have duplicate (e.g a table with
    # multiple 'id' named fields) we don't want to run the generic duplicate fix
    # below. Instead we want all 'id' named fields changed to 'id_2', 'id_3' etc
    # including the first one. If we were to first run the generic dupe fix logic
    # then it would convert 'id', 'id', to 'id', 'id_2', and then this logic
    # would convert that to 'id_3', 'id_2'.
    tables_with_reserved_or_blank_fields = (
        Field.objects.values("table_id", "name")
        .filter(name__in=["order", "id", ""])
        .distinct()
        .values_list("table_id", "name")
        .order_by("table_id", "name")
    )
    for table_id, reserved_name in tables_with_reserved_or_blank_fields:
        fields_with_reserved_names = Field.objects.filter(
            table_id=table_id, name=reserved_name
        ).order_by("id")

        # Rename blank fields to Field_1, Field_2 etc
        if reserved_name == "":
            reserved_name = "Field"
            i = 1
        else:
            i = 2

        # We don't skip the smallest id field here as we want rename all fields
        # which clash with a reserved name or are blank.
        for field in fields_with_reserved_names:
            new_name, i = find_next_unused_field_name(Field, table_id, reserved_name, i)
            field.old_name = field.name
            field.name = new_name
            field.save()


def find_next_unused_field_name(Field, table_id, field_name, start_index):
    """
    Finds a unused field name in the provided table starting with field_name.
    If field_name is not taken then it will be returned, if it is taken then the
    next name appended with an _X where X is a positive integer which is free will
    be returned.

    :param table: The table whose fields to search.
    :param field_name: The field_name to find a unused name for.
    :return: A free field name starting with field_name possibly followed by an
        _X where X is a positive integer.
    """
    original_field_name = field_name
    i = start_index
    while True:
        field_name = f"{original_field_name}_{i}"
        i += 1
        if not Field.objects.filter(table_id=table_id, name=field_name).exists():
            break
    return field_name, i


# noinspection PyPep8Naming
def reverse(apps, schema_editor):
    Field = apps.get_model("database", "Field")

    Field.objects.filter(old_name__isnull=False).update(name=F("old_name"))


class Migration(migrations.Migration):
    dependencies = [
        ("database", "0031_fix_url_field_max_length"),
    ]

    operations = [
        migrations.AddField(
            model_name="field",
            name="old_name",
            field=models.CharField(blank=True, max_length=255, null=True),
        ),
        migrations.RunPython(forward, reverse),
    ]
