from django.core.management.base import BaseCommand

from baserow.core.management.backup.backup import (
    BackupPostgresCommand,
    restore_backup,
)


class Command(BaseCommand):
    help = """
        Restores Baserow database back_up file generated by the Baserow
        management command backup_db.
        To provide the database password you should either have a valid .pgpass file
        containing the password for the requested connection in the expected postgres
        location (see https://www.postgresql.org/docs/current/libpq-pgpass.html) or set
        the PGPASSFILE environment variable.

        WARNING: This command is only safe to run on a database which is not actively
        being updated, not connected to a running version of Baserow for the
        duration of the back-up and ideally is a blank database unless you manually
        provide additional arguments configuring pg_restore to replace/update.

        This command will be running over multiple split up pg_dump files which contain
        the databases tables in batches.
        """

    def create_parser(self, prog_name, subcommand, **kwargs):
        kwargs["add_help"] = False
        return super().create_parser(prog_name, subcommand, **kwargs)

    def add_arguments(self, parser):
        # Override the help flag so -h can be used for host like pg_dump
        parser.add_argument(
            "--help", action="help", help="Show this help message and exit."
        )
        # The arguments below are meant to match `pg_dump`s arguments in name as this
        # management command is a simple batching/looping wrapper over `pg_dump`.
        parser.add_argument(
            "-j",
            "--jobs",
            type=int,
            default=1,
            dest="jobs",
            help="Run each `pg_restore` command in parallel by restoring this number "
            "of tables simultaneously per batch back-up run. This option reduces "
            "the time of the restore but it also increases the load on the database"
            "server. Please read the `pg_restore` documentation for this argument "
            "for further details.",
        )
        parser.add_argument(
            "-f",
            "--file",
            type=str,
            required=True,
            dest="file",
            help="Restores from the specified file produced by the baserow "
            "management command backup_db.",
        )
        parser.add_argument(
            "-h",
            "--host",
            type=str,
            required=True,
            dest="host",
            help="The host name of the machine on which the database is running.",
        )
        parser.add_argument(
            "-d",
            "--database",
            required=True,
            type=str,
            dest="database",
            help="Specifies the name of the database to connect to.",
        )
        parser.add_argument(
            "-U",
            "--username",
            required=True,
            type=str,
            dest="username",
            help="The username to connect to the database as.",
        )
        parser.add_argument(
            "-p",
            "--port",
            type=str,
            default="5432",
            dest="port",
            help="Specifies the TCP port or local Unix domain socket file on which "
            "the server is listening for connections.",
        )
        parser.add_argument(
            "additional_pg_restore_args",
            nargs="*",
            help="Any further args specified here will be directly "
            "passed to each call of `pg_restore` which this back_up tool "
            "runs, please see https://www.postgresql.org/docs/11/app-pgdump.html for "
            "all the available options. Please be careful as arguments provided "
            "here will override arguments passed to `pg_restore` internally "
            "by this tool causing undefined and erroneous behaviour.",
        )

    def handle(self, *args, **options):
        host = options["host"]
        database = options["database"]
        username = options["username"]
        port = options["port"]
        file = options["file"]
        jobs = options["jobs"]
        additional_args = options["additional_pg_restore_args"]

        dump_args = BackupPostgresCommand(
            host,
            database,
            username,
            port,
            jobs,
            additional_args,
        )
        restore_backup(dump_args, file)
